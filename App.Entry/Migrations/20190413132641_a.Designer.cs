// <auto-generated />
using System;
using App.Entry.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.Entry.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190413132641_a")]
    partial class a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("App.Core.Authorization.Apis.Api", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Controller");

                    b.Property<string>("Method");

                    b.Property<string>("Name");

                    b.Property<string>("Uid");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.FunctionApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiId");

                    b.Property<int>("FunctionId");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("FunctionId");

                    b.ToTable("FunctionApis");
                });

            modelBuilder.Entity("App.Core.Authorization.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Icon");

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Pid");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.ModuleApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiId");

                    b.Property<int>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleApis");
                });

            modelBuilder.Entity("App.Core.Authorization.OrganizationUnits.OrganizationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<bool>("Disable");

                    b.Property<string>("Fax");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<string>("Tel");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsStatic");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FunctionId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFunctions");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModules");
                });

            modelBuilder.Entity("App.Core.Authorization.Tenants.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyEmail");

                    b.Property<string>("CompanyName");

                    b.Property<int>("ManagerId");

                    b.Property<string>("UserSuffix");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.MenuShortcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MenuId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuShortcuts");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .HasMaxLength(50);

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLunar");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("MenuId");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.Property<string>("Positions");

                    b.Property<int>("SortNo");

                    b.Property<int?>("SuperiorId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("SuperiorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserQyWeixin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("QyWxUserId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQyWeixins");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("OrganizationUnitId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUnits");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserWeixin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.Property<string>("WxOpenId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWeixins");
                });

            modelBuilder.Entity("App.Core.FileManagement.AttachmentFileMetas.AttachmentFileMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttachId");

                    b.Property<int>("AttachmentId");

                    b.Property<int>("FileMetaId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AttachId");

                    b.HasIndex("FileMetaId");

                    b.ToTable("AttachmentFileMetas");
                });

            modelBuilder.Entity("App.Core.FileManagement.Attachments.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Extra");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Summary");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("App.Core.FileManagement.Files.FileMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<int>("State");

                    b.Property<string>("Suffix");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("FileMetas");
                });

            modelBuilder.Entity("App.Core.FileManagement.PublicFiles.PublicFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<string>("Suffix");

                    b.HasKey("Id");

                    b.ToTable("PublicFiles");
                });

            modelBuilder.Entity("App.Core.Messaging.DelayMessages.DelayMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Recipient");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<string>("Uid");

                    b.HasKey("Id");

                    b.ToTable("DelayMessages");
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Actor");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Remark");

                    b.Property<string>("Target");

                    b.Property<string>("TargetType");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.MessageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("MessageId");

                    b.Property<string>("Recipient");

                    b.Property<string>("Sender");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageRecords");
                });

            modelBuilder.Entity("App.Core.Messaging.Subscriptions.EventAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("SubscriptionEvent");

                    b.HasKey("Id");

                    b.ToTable("EventActions");
                });

            modelBuilder.Entity("App.Core.Messaging.Subscriptions.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("SubscriptionEvent");

                    b.Property<string>("SubscriptionTarget");

                    b.Property<string>("SubscriptionTargetType");

                    b.Property<int>("TenantId");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.Function", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany("Functions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.FunctionApi", b =>
                {
                    b.HasOne("App.Core.Authorization.Apis.Api", "Api")
                        .WithMany()
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Functions.Function", "Function")
                        .WithMany("FunctionApis")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Menus.Menu", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("App.Core.Authorization.Menus.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.Module", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.ModuleApi", b =>
                {
                    b.HasOne("App.Core.Authorization.Apis.Api", "Api")
                        .WithMany()
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany("ModuleApis")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.OrganizationUnits.OrganizationUnit", b =>
                {
                    b.HasOne("App.Core.Authorization.OrganizationUnits.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleFunction", b =>
                {
                    b.HasOne("App.Core.Authorization.Functions.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany("RoleFunctions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleModule", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.MenuShortcut", b =>
                {
                    b.HasOne("App.Core.Authorization.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("Shortcut")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.User", b =>
                {
                    b.HasOne("App.Core.Authorization.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("App.Core.Authorization.Users.User", "Superior")
                        .WithMany()
                        .HasForeignKey("SuperiorId");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserQyWeixin", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserUnit", b =>
                {
                    b.HasOne("App.Core.Authorization.OrganizationUnits.OrganizationUnit", "OrganizationUnit")
                        .WithMany("UserUnits")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("UserUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserWeixin", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.FileManagement.AttachmentFileMetas.AttachmentFileMeta", b =>
                {
                    b.HasOne("App.Core.FileManagement.Attachments.Attachment", "Attachment")
                        .WithMany("Files")
                        .HasForeignKey("AttachId");

                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.MessageRecord", b =>
                {
                    b.HasOne("App.Core.Messaging.Messages.Message", "Message")
                        .WithMany("MessageRecords")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
