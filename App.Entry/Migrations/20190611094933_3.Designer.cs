// <auto-generated />
using System;
using App.Entry.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.Entry.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190611094933_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("App.Contract.ConstructionUnits.ConstructionUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CompanyContact");

                    b.Property<string>("CompanySize");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EvaluationLevel");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("LegalPerson");

                    b.Property<string>("Link");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<float>("RegisteredCapital");

                    b.Property<float>("Score");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.Property<string>("UniformCreditCode");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ConstructionUnits");
                });

            modelBuilder.Entity("App.Contract.ContractDeposits.ContractDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ConventionalRefundAmount");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("DepositAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("ContractDeposits");
                });

            modelBuilder.Entity("App.Contract.Contracts.ContractAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractId");

                    b.Property<int>("FileMetaId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FileMetaId");

                    b.ToTable("ContractAttachments");
                });

            modelBuilder.Entity("App.Contract.Contracts.Contractt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Content");

                    b.Property<int?>("ContractId");

                    b.Property<string>("ContractNumber");

                    b.Property<float>("ContractPrice");

                    b.Property<float>("ContractSettlementPrice");

                    b.Property<int?>("ContractionMethodId");

                    b.Property<int?>("ContractorId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Employer");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<string>("PaymentTerms");

                    b.Property<DateTime?>("PerformanceEndDate");

                    b.Property<DateTime?>("PerformanceStartDate");

                    b.Property<int>("Period");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Section");

                    b.Property<string>("Signature");

                    b.Property<DateTime?>("SigningDate");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("ThirdParty");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContractionMethodId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("App.Core.Authorization.Apis.Api", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Controller");

                    b.Property<string>("Method");

                    b.Property<string>("Name");

                    b.Property<string>("Uid");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.FunctionApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiId");

                    b.Property<int>("FunctionId");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("FunctionId");

                    b.ToTable("FunctionApis");
                });

            modelBuilder.Entity("App.Core.Authorization.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Icon");

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Pid");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.ModuleApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiId");

                    b.Property<int>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleApis");
                });

            modelBuilder.Entity("App.Core.Authorization.OrganizationUnits.OrganizationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<bool>("Disable");

                    b.Property<string>("Fax");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<string>("Tel");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("App.Core.Authorization.PriviledgedPersons.PrivilegedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ModuleName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PrivilegedPeople");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsStatic");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FunctionId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFunctions");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModules");
                });

            modelBuilder.Entity("App.Core.Authorization.Tenants.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyEmail");

                    b.Property<string>("CompanyName");

                    b.Property<int>("ManagerId");

                    b.Property<string>("UserSuffix");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.MenuShortcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MenuId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuShortcuts");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .HasMaxLength(50);

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLunar");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("MenuId");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.Property<string>("Positions");

                    b.Property<int>("SortNo");

                    b.Property<int?>("SuperiorId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("SuperiorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserQyWeixin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("QyWxUserId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQyWeixins");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("OrganizationUnitId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUnits");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserWeixin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.Property<string>("WxOpenId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWeixins");
                });

            modelBuilder.Entity("App.Core.FileManagement.AttachmentFileMetas.AttachmentFileMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttachId");

                    b.Property<int>("AttachmentId");

                    b.Property<int>("FileMetaId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AttachId");

                    b.HasIndex("FileMetaId");

                    b.ToTable("AttachmentFileMetas");
                });

            modelBuilder.Entity("App.Core.FileManagement.Attachments.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Extra");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Summary");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("App.Core.FileManagement.Files.FileMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<int>("State");

                    b.Property<string>("Suffix");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("FileMetas");
                });

            modelBuilder.Entity("App.Core.FileManagement.PublicFiles.PublicFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<string>("Suffix");

                    b.HasKey("Id");

                    b.ToTable("PublicFiles");
                });

            modelBuilder.Entity("App.Core.Form.FieldDefinitions.FieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FormDefinitionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FormDefinitionId");

                    b.ToTable("FieldDefinitions");
                });

            modelBuilder.Entity("App.Core.Form.Fields.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("BoolVar");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime?>("DateTimeVar");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FieldDefinitionId");

                    b.Property<float?>("FloatVar");

                    b.Property<int>("FormDefinitionId");

                    b.Property<int?>("IntVar");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<long?>("LongVar");

                    b.Property<string>("ObjectVar");

                    b.Property<string>("Remark");

                    b.Property<short?>("ShortVar");

                    b.Property<string>("StringVar");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.Property<int?>("Wf_Hi_ProcessInstanceId");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("FormDefinitionId");

                    b.HasIndex("Wf_Hi_ProcessInstanceId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("App.Core.Form.FormDefinitions.FormDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<int>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("FormDefinitions");
                });

            modelBuilder.Entity("App.Core.Form.FormModels.FormModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Data");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FormDefinitionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FormDefinitionId");

                    b.ToTable("FormModels");
                });

            modelBuilder.Entity("App.Core.Messaging.DelayMessages.DelayMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Recipient");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<string>("Uid");

                    b.HasKey("Id");

                    b.ToTable("DelayMessages");
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Actor");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Remark");

                    b.Property<string>("Target");

                    b.Property<string>("TargetType");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.MessageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("MessageId");

                    b.Property<string>("Recipient");

                    b.Property<string>("Sender");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageRecords");
                });

            modelBuilder.Entity("App.Core.Messaging.Subscriptions.EventAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("SubscriptionEvent");

                    b.HasKey("Id");

                    b.ToTable("EventActions");
                });

            modelBuilder.Entity("App.Core.Messaging.Subscriptions.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("SubscriptionEvent");

                    b.Property<string>("SubscriptionTarget");

                    b.Property<string>("SubscriptionTargetType");

                    b.Property<int>("TenantId");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("App.Core.Parameter.Configs.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("App.Core.Parameter.Selections.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SelectionId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.HasIndex("SelectionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("App.Core.Parameter.Selections.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("App.Core.Workflow.Activities.Wf_Hi_Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("Duration");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeType");

                    b.Property<string>("NodeUid");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("TaskInstanceId");

                    b.ToTable("Wf_Hi_Activities");
                });

            modelBuilder.Entity("App.Core.Workflow.Comments.Wf_Hi_Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Message");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<int>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("TaskInstanceId");

                    b.ToTable("Wf_Hi_Comments");
                });

            modelBuilder.Entity("App.Core.Workflow.Executions.Wf_Ru_Execution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsConcurrent");

                    b.Property<bool>("IsSuspension");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeUid");

                    b.Property<int?>("Pid");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Ru_Executions");
                });

            modelBuilder.Entity("App.Core.Workflow.IdentityLinks.Wf_Hi_IdentityLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Group");

                    b.Property<int?>("TaskId");

                    b.Property<int>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Wf_Hi_IdentityLink");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<string>("FormName");

                    b.Property<string>("FormType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("ModelId");

                    b.Property<string>("Name");

                    b.Property<int>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Wf_Re_ProcessDefinitions");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Path");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Wf_Re_ProcessModels");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("Duration");

                    b.Property<string>("EndNodeName");

                    b.Property<string>("EndNodeUid");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int?>("FormDefinitionId");

                    b.Property<bool>("IsAutoCreated");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<string>("StartNodeName");

                    b.Property<string>("StartNodeUid");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("State");

                    b.Property<string>("StopReason");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FormDefinitionId");

                    b.HasIndex("Pid");

                    b.HasIndex("ProcessDefinitionId");

                    b.ToTable("Wf_Hi_ProcessInstances");
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assignee");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("Duration");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeUid");

                    b.Property<bool>("NonExecution");

                    b.Property<string>("Owner");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("TenantId");

                    b.Property<int>("TimeLimit");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Hi_TaskInstances");
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Ru_Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assignee");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DelegationState");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeUid");

                    b.Property<string>("Owner");

                    b.Property<int?>("ParentInstanceId");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessExecutionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<int>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("TimeLimit");

                    b.HasKey("Id");

                    b.HasIndex("ProcessExecutionId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Ru_Tasks");
                });

            modelBuilder.Entity("App.Core.Workflow.Variables.Wf_Hi_Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("BoolVar");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime?>("DateTimeVar");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float?>("FloatVar");

                    b.Property<int?>("IntVar");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<long?>("LongVar");

                    b.Property<string>("Name");

                    b.Property<string>("ObjectVar");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<short?>("ShortVar");

                    b.Property<string>("StringVar");

                    b.Property<int?>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Wf_Hi_Variables");
                });

            modelBuilder.Entity("App.Core.Workflow.Variables.Wf_Ru_Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("BoolVar");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime?>("DateTimeVar");

                    b.Property<float?>("FloatVar");

                    b.Property<int?>("IntVar");

                    b.Property<long?>("LongVar");

                    b.Property<string>("Name");

                    b.Property<string>("ObjectVar");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int?>("ProcessExecutionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<short?>("ShortVar");

                    b.Property<string>("StringVar");

                    b.Property<int?>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProcessExecutionId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Ru_Variables");
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("MemorabiliaId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("MemorabiliaId");

                    b.ToTable("MemorabiliaAttachments");
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<string>("Participant");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MemorabiliaRecords");
                });

            modelBuilder.Entity("App.Projects.ProjectAttachments.ProjectAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAttachments");
                });

            modelBuilder.Entity("App.Projects.ProjectBaseInfos.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualCommencementDate");

                    b.Property<DateTime?>("ActualCompletionDate");

                    b.Property<DateTime?>("ActualFinancialAccountsDate");

                    b.Property<DateTime?>("ActualFinishDate");

                    b.Property<DateTime?>("ActualTransferDate");

                    b.Property<string>("AffiliationUnit");

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("ConstructionAgentUnitId");

                    b.Property<int?>("ConstructionNatureId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int>("DataState");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("FinancialInvestment");

                    b.Property<int?>("FundsSourceId");

                    b.Property<float>("GeneralEstimate");

                    b.Property<string>("Headquarters");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<string>("No");

                    b.Property<float>("NonFinancialInvestment");

                    b.Property<DateTime?>("PlannedCommencementDate");

                    b.Property<DateTime?>("PlannedCompletionDate");

                    b.Property<DateTime?>("PlannedFinancialAccountsDate");

                    b.Property<DateTime?>("PlannedFinishDate");

                    b.Property<DateTime?>("PlannedTransferDate");

                    b.Property<DateTime?>("PreparetoryWorkPlanDate");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int?>("ProjectNatureId");

                    b.Property<int?>("ProprietorUnitId");

                    b.Property<int?>("ResponsibleUnitId");

                    b.Property<int?>("StageId");

                    b.Property<int?>("StateId");

                    b.Property<string>("Summary");

                    b.Property<int?>("SupervisorUnitId");

                    b.Property<int?>("TagId");

                    b.Property<int>("TenantId");

                    b.Property<float>("TentativeEstimatedTotalInvestment");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConstructionAgentUnitId");

                    b.HasIndex("ConstructionNatureId");

                    b.HasIndex("FundsSourceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectNatureId");

                    b.HasIndex("ProprietorUnitId");

                    b.HasIndex("ResponsibleUnitId");

                    b.HasIndex("StageId");

                    b.HasIndex("StateId");

                    b.HasIndex("SupervisorUnitId");

                    b.HasIndex("TagId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("App.Projects.ProjectLocations.ProjectLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressDetail");

                    b.Property<string>("City");

                    b.Property<string>("District");

                    b.Property<float?>("Latitude");

                    b.Property<float?>("Longitude");

                    b.Property<string>("Province");

                    b.Property<int>("TenantId");

                    b.Property<string>("Town");

                    b.HasKey("Id");

                    b.ToTable("ProjectLocations");
                });

            modelBuilder.Entity("App.Projects.ProjectMembers.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectRole");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("App.Workflow.ProcessDefinitions.RoleProcessDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDefinitionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleProcessDefinitions");
                });

            modelBuilder.Entity("App.Contract.ConstructionUnits.ConstructionUnit", b =>
                {
                    b.HasOne("App.Contract.ConstructionUnits.ConstructionUnit", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");
                });

            modelBuilder.Entity("App.Contract.Contracts.ContractAttachment", b =>
                {
                    b.HasOne("App.Contract.Contracts.Contractt", "Contract")
                        .WithMany("Attachments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Contract.Contracts.Contractt", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("App.Contract.ContractDeposits.ContractDeposit", "Deposit")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "ContractionMethod")
                        .WithMany()
                        .HasForeignKey("ContractionMethodId");

                    b.HasOne("App.Contract.ConstructionUnits.ConstructionUnit", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId");

                    b.HasOne("App.Contract.ConstructionUnits.ConstructionUnit", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.Function", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany("Functions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.FunctionApi", b =>
                {
                    b.HasOne("App.Core.Authorization.Apis.Api", "Api")
                        .WithMany()
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Functions.Function", "Function")
                        .WithMany("FunctionApis")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Menus.Menu", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("App.Core.Authorization.Menus.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.Module", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.ModuleApi", b =>
                {
                    b.HasOne("App.Core.Authorization.Apis.Api", "Api")
                        .WithMany()
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany("ModuleApis")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.OrganizationUnits.OrganizationUnit", b =>
                {
                    b.HasOne("App.Core.Authorization.OrganizationUnits.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.PriviledgedPersons.PrivilegedPerson", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleFunction", b =>
                {
                    b.HasOne("App.Core.Authorization.Functions.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany("RoleFunctions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleModule", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.MenuShortcut", b =>
                {
                    b.HasOne("App.Core.Authorization.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("Shortcut")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.User", b =>
                {
                    b.HasOne("App.Core.Authorization.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("App.Core.Authorization.Users.User", "Superior")
                        .WithMany()
                        .HasForeignKey("SuperiorId");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserQyWeixin", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserUnit", b =>
                {
                    b.HasOne("App.Core.Authorization.OrganizationUnits.OrganizationUnit", "OrganizationUnit")
                        .WithMany("UserUnits")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("UserUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserWeixin", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.FileManagement.AttachmentFileMetas.AttachmentFileMeta", b =>
                {
                    b.HasOne("App.Core.FileManagement.Attachments.Attachment", "Attachment")
                        .WithMany("Files")
                        .HasForeignKey("AttachId");

                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Form.FieldDefinitions.FieldDefinition", b =>
                {
                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Form.Fields.Field", b =>
                {
                    b.HasOne("App.Core.Form.FieldDefinitions.FieldDefinition", "FieldDefinition")
                        .WithMany()
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance")
                        .WithMany("Fields")
                        .HasForeignKey("Wf_Hi_ProcessInstanceId");
                });

            modelBuilder.Entity("App.Core.Form.FormModels.FormModel", b =>
                {
                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany("FormModels")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.MessageRecord", b =>
                {
                    b.HasOne("App.Core.Messaging.Messages.Message", "Message")
                        .WithMany("MessageRecords")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Parameter.Selections.Option", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");

                    b.HasOne("App.Core.Parameter.Selections.Selection")
                        .WithMany("Options")
                        .HasForeignKey("SelectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Activities.Wf_Hi_Activity", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", "TaskInstance")
                        .WithMany()
                        .HasForeignKey("TaskInstanceId");
                });

            modelBuilder.Entity("App.Core.Workflow.Comments.Wf_Hi_Comment", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Comments")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", "TaskInstance")
                        .WithMany("Comments")
                        .HasForeignKey("TaskInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Executions.Wf_Ru_Execution", b =>
                {
                    b.HasOne("App.Core.Workflow.Executions.Wf_Ru_Execution", "Parent")
                        .WithMany()
                        .HasForeignKey("Pid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Executions")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.IdentityLinks.Wf_Hi_IdentityLink", b =>
                {
                    b.HasOne("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", "TaskInstance")
                        .WithMany("IdentityLinks")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", b =>
                {
                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionId");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "Parent")
                        .WithMany()
                        .HasForeignKey("Pid");

                    b.HasOne("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", "ProcessDefinition")
                        .WithMany()
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("TaskInstances")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Ru_Task", b =>
                {
                    b.HasOne("App.Core.Workflow.Executions.Wf_Ru_Execution", "ProcessExecution")
                        .WithMany("Tasks")
                        .HasForeignKey("ProcessExecutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Variables.Wf_Ru_Variable", b =>
                {
                    b.HasOne("App.Core.Workflow.Executions.Wf_Ru_Execution", "ProcessExecution")
                        .WithMany("Variables")
                        .HasForeignKey("ProcessExecutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Variables")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", "MemorabiliaRecord")
                        .WithMany("Attachments")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Projects.ProjectAttachments.ProjectAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Projects.ProjectBaseInfos.Project", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "ConstructionAgentUnit")
                        .WithMany()
                        .HasForeignKey("ConstructionAgentUnitId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "ConstructionNature")
                        .WithMany()
                        .HasForeignKey("ConstructionNatureId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "FundsSource")
                        .WithMany()
                        .HasForeignKey("FundsSourceId");

                    b.HasOne("App.Projects.ProjectLocations.ProjectLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "ProjectNature")
                        .WithMany()
                        .HasForeignKey("ProjectNatureId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "ProprietorUnit")
                        .WithMany()
                        .HasForeignKey("ProprietorUnitId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "ResponsibleUnit")
                        .WithMany()
                        .HasForeignKey("ResponsibleUnitId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "SupervisorUnit")
                        .WithMany()
                        .HasForeignKey("SupervisorUnitId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("App.Projects.ProjectMembers.ProjectMember", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Workflow.ProcessDefinitions.RoleProcessDefinition", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", "ProcessDefinition")
                        .WithMany()
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
