// <auto-generated />
using System;
using App.Entry.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.Entry.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190704035050_40")]
    partial class _40
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("App.Calendars.Calendars.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllDay");

                    b.Property<int>("CalendarState");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("FinishTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Remark");

                    b.Property<DateTime?>("StartTime");

                    b.Property<DateTime?>("StopTime");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("App.Contract.ConstructionUnits.ConstructionUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CompanyContact");

                    b.Property<string>("CompanySize");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EvaluationLevel");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("LegalPerson");

                    b.Property<string>("Link");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<decimal>("RegisteredCapital")
                        .HasColumnType("decimal(15,2)");

                    b.Property<float>("Score");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.Property<string>("UniformCreditCode");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ConstructionUnits");
                });

            modelBuilder.Entity("App.Contract.ContractDeposits.ContractDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractId");

                    b.Property<decimal>("ConventionalRefundAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("ContractDeposits");
                });

            modelBuilder.Entity("App.Contract.Contracts.ContractAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractId");

                    b.Property<int>("FileMetaId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FileMetaId");

                    b.ToTable("ContractAttachments");
                });

            modelBuilder.Entity("App.Contract.Contracts.Contractt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<string>("Content");

                    b.Property<string>("ContractNumber");

                    b.Property<decimal>("ContractPrice")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("ContractSettlementPrice")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("ContractorId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Employer");

                    b.Property<string>("Information");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<string>("PaymentTerms");

                    b.Property<DateTime?>("PerformanceEndDate");

                    b.Property<DateTime?>("PerformanceStartDate");

                    b.Property<int>("Period");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Section");

                    b.Property<string>("Signature");

                    b.Property<DateTime?>("SigningDate");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("ThirdParty");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("App.Core.Authorization.Apis.Api", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("Controller");

                    b.Property<string>("Method");

                    b.Property<string>("Name");

                    b.Property<string>("Uid");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.FunctionApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiId");

                    b.Property<int>("FunctionId");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("FunctionId");

                    b.ToTable("FunctionApis");
                });

            modelBuilder.Entity("App.Core.Authorization.Menus.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Icon");

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Pid");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.ModuleApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiId");

                    b.Property<int>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleApis");
                });

            modelBuilder.Entity("App.Core.Authorization.OrganizationUnits.OrganizationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<bool>("Disable");

                    b.Property<string>("Fax");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SortNo");

                    b.Property<string>("Tel");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.ToTable("OrganizationUnits");
                });

            modelBuilder.Entity("App.Core.Authorization.PriviledgedPersons.PrivilegedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ModuleName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PrivilegedPeople");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsStatic");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FunctionId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFunctions");
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModules");
                });

            modelBuilder.Entity("App.Core.Authorization.Tenants.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyEmail");

                    b.Property<string>("CompanyName");

                    b.Property<int>("ManagerId");

                    b.Property<string>("UserSuffix");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.MenuShortcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MenuId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuShortcuts");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .HasMaxLength(50);

                    b.Property<string>("Avatar");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLunar");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("MenuId");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.Property<string>("Positions");

                    b.Property<int>("SortNo");

                    b.Property<int?>("SuperiorId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("SuperiorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserQyWeixin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("QyWxUserId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQyWeixins");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("OrganizationUnitId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUnits");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserWeixin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.Property<string>("WxOpenId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWeixins");
                });

            modelBuilder.Entity("App.Core.FileManagement.AttachmentFileMetas.AttachmentFileMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttachId");

                    b.Property<int>("AttachmentId");

                    b.Property<int>("FileMetaId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AttachId");

                    b.HasIndex("FileMetaId");

                    b.ToTable("AttachmentFileMetas");
                });

            modelBuilder.Entity("App.Core.FileManagement.Attachments.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Extra");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Summary");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("App.Core.FileManagement.Files.FileMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<int>("State");

                    b.Property<string>("Suffix");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("FileMetas");
                });

            modelBuilder.Entity("App.Core.FileManagement.PublicFiles.PublicFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<string>("Suffix");

                    b.HasKey("Id");

                    b.ToTable("PublicFiles");
                });

            modelBuilder.Entity("App.Core.Form.FieldDefinitions.FieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FormDefinitionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FormDefinitionId");

                    b.ToTable("FieldDefinitions");
                });

            modelBuilder.Entity("App.Core.Form.Fields.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("BoolVar");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime?>("DateTimeVar");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FieldDefinitionId");

                    b.Property<float?>("FloatVar");

                    b.Property<int>("FormDefinitionId");

                    b.Property<int?>("IntVar");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<long?>("LongVar");

                    b.Property<string>("ObjectVar");

                    b.Property<string>("Remark");

                    b.Property<short?>("ShortVar");

                    b.Property<string>("StringVar");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.Property<int?>("Wf_Hi_ProcessInstanceId");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("FormDefinitionId");

                    b.HasIndex("Wf_Hi_ProcessInstanceId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("App.Core.Form.FormDefinitions.FormDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<int>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("FormDefinitions");
                });

            modelBuilder.Entity("App.Core.Form.FormModels.FormModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Data");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FormDefinitionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FormDefinitionId");

                    b.ToTable("FormModels");
                });

            modelBuilder.Entity("App.Core.Messaging.DelayMessages.DelayMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Recipient");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<string>("Uid");

                    b.HasKey("Id");

                    b.ToTable("DelayMessages");
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Actor");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Remark");

                    b.Property<string>("Target");

                    b.Property<string>("TargetType");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.MessageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("MessageId");

                    b.Property<string>("Recipient");

                    b.Property<string>("Sender");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageRecords");
                });

            modelBuilder.Entity("App.Core.Messaging.Subscriptions.EventAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("SubscriptionEvent");

                    b.HasKey("Id");

                    b.ToTable("EventActions");
                });

            modelBuilder.Entity("App.Core.Messaging.Subscriptions.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("SubscriptionEvent");

                    b.Property<string>("SubscriptionTarget");

                    b.Property<string>("SubscriptionTargetType");

                    b.Property<int>("TenantId");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("App.Core.Parameter.Configs.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("App.Core.Parameter.Selections.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("SelectionId");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.HasIndex("SelectionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("App.Core.Parameter.Selections.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortNo");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("App.Core.Workflow.Activities.Wf_Hi_Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("Duration");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeType");

                    b.Property<string>("NodeUid");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("TaskInstanceId");

                    b.ToTable("Wf_Hi_Activities");
                });

            modelBuilder.Entity("App.Core.Workflow.Comments.Wf_Hi_Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Message");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<int>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("TaskInstanceId");

                    b.ToTable("Wf_Hi_Comments");
                });

            modelBuilder.Entity("App.Core.Workflow.Executions.Wf_Ru_Execution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsConcurrent");

                    b.Property<bool>("IsSuspension");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeUid");

                    b.Property<int?>("Pid");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Ru_Executions");
                });

            modelBuilder.Entity("App.Core.Workflow.IdentityLinks.Wf_Hi_IdentityLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Group");

                    b.Property<int?>("TaskId");

                    b.Property<int>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Wf_Hi_IdentityLink");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<string>("FormName");

                    b.Property<string>("FormType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("ModelId");

                    b.Property<string>("Name");

                    b.Property<int>("TenantId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Wf_Re_ProcessDefinitions");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Path");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Wf_Re_ProcessModels");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("Duration");

                    b.Property<string>("EndNodeName");

                    b.Property<string>("EndNodeUid");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int?>("FormDefinitionId");

                    b.Property<bool>("IsAutoCreated");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<string>("StartNodeName");

                    b.Property<string>("StartNodeUid");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("State");

                    b.Property<string>("StopReason");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FormDefinitionId");

                    b.HasIndex("Pid");

                    b.HasIndex("ProcessDefinitionId");

                    b.ToTable("Wf_Hi_ProcessInstances");
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assignee");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<long?>("Duration");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeUid");

                    b.Property<bool>("NonExecution");

                    b.Property<string>("Owner");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("TenantId");

                    b.Property<int>("TimeLimit");

                    b.HasKey("Id");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Hi_TaskInstances");
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Ru_Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assignee");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DelegationState");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NodeName");

                    b.Property<string>("NodeUid");

                    b.Property<string>("Owner");

                    b.Property<int?>("ParentInstanceId");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessExecutionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<int>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("TimeLimit");

                    b.HasKey("Id");

                    b.HasIndex("ProcessExecutionId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Ru_Tasks");
                });

            modelBuilder.Entity("App.Core.Workflow.Variables.Wf_Hi_Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("BoolVar");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime?>("DateTimeVar");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float?>("FloatVar");

                    b.Property<int?>("IntVar");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<long?>("LongVar");

                    b.Property<string>("Name");

                    b.Property<string>("ObjectVar");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<short?>("ShortVar");

                    b.Property<string>("StringVar");

                    b.Property<int?>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Wf_Hi_Variables");
                });

            modelBuilder.Entity("App.Core.Workflow.Variables.Wf_Ru_Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("BoolVar");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime?>("DateTimeVar");

                    b.Property<float?>("FloatVar");

                    b.Property<int?>("IntVar");

                    b.Property<long?>("LongVar");

                    b.Property<string>("Name");

                    b.Property<string>("ObjectVar");

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int?>("ProcessExecutionId");

                    b.Property<int>("ProcessInstanceId");

                    b.Property<short?>("ShortVar");

                    b.Property<string>("StringVar");

                    b.Property<int?>("TaskInstanceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProcessExecutionId");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("Wf_Ru_Variables");
                });

            modelBuilder.Entity("App.Funds.ContractPayments.ContractPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CompleteAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ContractId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("PaymentNumber");

                    b.Property<DateTime>("PaymentTime");

                    b.Property<string>("PaymentType");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<string>("Remark");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ContractPayments");
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblemRectifications.HousekeepingProblemRectification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExecDate");

                    b.Property<int>("HousekeepingProblemId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("HousekeepingProblemId");

                    b.ToTable("HousekeepingProblemRectifications");
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblemRectifications.HousekeepingProblemRectificationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("HousekeepingProblemRectificationId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("HousekeepingProblemRectificationId");

                    b.ToTable("HousekeepingProblemRectificationAttachments");
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblems.HousekeepingCompletionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("HousekeepingProblemId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("HousekeepingProblemId");

                    b.ToTable("HousekeepingCompletionAttachments");
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblems.HousekeepingProblemAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("HousekeepingProblemId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("HousekeepingProblemId");

                    b.ToTable("HousekeepingProblemAttachments");
                });

            modelBuilder.Entity("App.Housekeeping.Housekeepings.HousekeepingProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CompletionTime");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime>("Deadline");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RectificationState");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("HousekeepingProblems");
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("MemorabiliaId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("MemorabiliaId");

                    b.ToTable("MemorabiliaAttachments");
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<string>("Participant");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MemorabiliaRecords");
                });

            modelBuilder.Entity("App.Problems.ProblemCoordinations.ProblemCoordination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExecDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("ProblemId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemCoordinations");
                });

            modelBuilder.Entity("App.Problems.ProblemCoordinations.ProblemCoordinationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("ProblemCoordinationId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("ProblemCoordinationId");

                    b.ToTable("ProblemCoordinationAttachments");
                });

            modelBuilder.Entity("App.Problems.Problems.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualCompletionTime");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Content");

                    b.Property<int>("CoordinationState");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<DateTime?>("PlannedCompletionTime");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProposalSolution");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("App.Problems.Problems.ProblemAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("ProblemId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemAttachments");
                });

            modelBuilder.Entity("App.ProjectBriefings.ProjectBriefings.ProjectBriefing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<string>("CumulativeImageProgress");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("HousekeepingConetent");

                    b.Property<string>("Information");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("NextWeekProgressPlan");

                    b.Property<string>("ProblemAndSolution");

                    b.Property<string>("ProgressLimitDate");

                    b.Property<int>("ProjectId");

                    b.Property<string>("QualityAccidentAndDescription");

                    b.Property<string>("QualitySourceAndDescription");

                    b.Property<string>("SafetyAccidentAndDescription");

                    b.Property<string>("SafetySourceAndDescription");

                    b.Property<string>("Supervision");

                    b.Property<int>("TenantId");

                    b.Property<string>("ThisWeekProgress");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBriefings");
                });

            modelBuilder.Entity("App.ProjectEarlyStage.EarlyStages.EarlyStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<int>("NodeId");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("ReplyDate");

                    b.Property<string>("ReplyNumber");

                    b.Property<DateTime?>("ReportDate");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("NodeId");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EarlyStages");
                });

            modelBuilder.Entity("App.ProjectEarlyStage.EarlyStages.EarlyStageAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EarlyStageId");

                    b.Property<int>("FileMetaId");

                    b.HasKey("Id");

                    b.HasIndex("EarlyStageId");

                    b.HasIndex("FileMetaId");

                    b.ToTable("EarlyStageAttachments");
                });

            modelBuilder.Entity("App.ProjectGantts.Gantts.ProjectGantt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectGantts");
                });

            modelBuilder.Entity("App.ProjectGantts.Links.ProjectLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GanttId");

                    b.Property<int>("SourceTaskId");

                    b.Property<int>("TargetTaskId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("GanttId");

                    b.ToTable("ProjectLinks");
                });

            modelBuilder.Entity("App.ProjectGantts.TaskAttachments.ProjectTaskAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("ProjectTaskId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("ProjectTaskId");

                    b.ToTable("ProjectTaskAttachment");
                });

            modelBuilder.Entity("App.ProjectGantts.Tasks.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActualDuration");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<int>("Assignee");

                    b.Property<string>("Content");

                    b.Property<int>("DataState");

                    b.Property<int>("Duration");

                    b.Property<int>("GanttId");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<int?>("Pid");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<decimal>("Progress")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Remark");

                    b.Property<int>("SortNo");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("GanttId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("App.ProjectPlan.AnnualPlans.AnnualPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<decimal>("PlannedDemolitionFee")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("PlannedProjectCosts")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("RecordDate");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("AnnualPlans");
                });

            modelBuilder.Entity("App.ProjectPlan.MonthlyPlans.MonthlyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<decimal>("PlannedDemolitionFee")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("PlannedProjectCosts")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("RecordDate");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("MonthlyPlans");
                });

            modelBuilder.Entity("App.ProjectProgress.PmMonthlyProgresses.MonthlyProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccumulatedImageProgress");

                    b.Property<decimal>("CompletedDemolitionFee")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("CompletedProjectCosts")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int>("DataState");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ImageProgress");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<string>("NextMonthPlannedImageProgress");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime>("RecordDate");

                    b.Property<string>("Supervision");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PmMonthlyProgresses");
                });

            modelBuilder.Entity("App.ProjectProgress.WeeklyProgresses.WeeklyProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccumulatedImageProgress");

                    b.Property<DateTime>("AddDate");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int>("DataState");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ImageProgress");

                    b.Property<string>("Information");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<string>("NextMonthPlannedImageProgress");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Supervision");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("WeeklyProgresses");
                });

            modelBuilder.Entity("App.ProjectProgress.WeeklyProgresses.WeeklyProgressAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("WeeklyProgressId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("WeeklyProgressId");

                    b.ToTable("WeeklyProgressAttachments");
                });

            modelBuilder.Entity("App.Projects.ProjectAttachments.ProjectAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAttachments");
                });

            modelBuilder.Entity("App.Projects.ProjectBaseInfos.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CommencementDate");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int>("DataState");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<decimal>("FinancialInvestment")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime?>("FinishDate");

                    b.Property<decimal>("GeneralEstimate")
                        .HasColumnType("decimal(15,2)");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<string>("Name");

                    b.Property<string>("No");

                    b.Property<decimal>("NonFinancialInvestment")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int?>("ProjectNatureId");

                    b.Property<int?>("StageId");

                    b.Property<int?>("StateId");

                    b.Property<string>("Summary");

                    b.Property<int>("TenantId");

                    b.Property<decimal>("TentativeEstimatedTotalInvestment")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectNatureId");

                    b.HasIndex("StageId");

                    b.HasIndex("StateId");

                    b.HasIndex("TypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("App.Projects.ProjectLocations.ProjectLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressDetail");

                    b.Property<string>("City");

                    b.Property<string>("District");

                    b.Property<float?>("Latitude");

                    b.Property<float?>("Longitude");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Province");

                    b.Property<string>("Street");

                    b.Property<int>("TenantId");

                    b.Property<string>("Town");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectLocations");
                });

            modelBuilder.Entity("App.Projects.ProjectMembers.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.Property<string>("ProjectRole");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("App.Projects.ProjectUnits.ProjectUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectUnit");
                });

            modelBuilder.Entity("App.Projects.ProjectUnits.ProjectUnitMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectUnitId");

                    b.Property<string>("ProjectUnitRole");

                    b.Property<int>("TenantId");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.HasIndex("ProjectUnitId");

                    b.ToTable("ProjectUnitMember");
                });

            modelBuilder.Entity("App.Quality.QualityAccidentDisposals.QualityAccidentDisposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("ExecDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<string>("Plan");

                    b.Property<int>("QualityAccidentId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("QualityAccidentId");

                    b.ToTable("QualityAccidentDisposals");
                });

            modelBuilder.Entity("App.Quality.QualityAccidentDisposals.QualityAccidentDisposalAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("QualityAccidentDisposalId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("QualityAccidentDisposalId");

                    b.ToTable("QualityAccidentDisposalAttachments");
                });

            modelBuilder.Entity("App.Quality.QualityAccidents.QualityAccident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DiscoveryTime");

                    b.Property<int>("DisposalState");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("SettlementTime");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("QualityAccidents");
                });

            modelBuilder.Entity("App.Quality.QualityAccidents.QualityAccidentAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("QualityAccidentId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("QualityAccidentId");

                    b.ToTable("QualityAccidentAttachments");
                });

            modelBuilder.Entity("App.Quality.QualityAccidents.QualitySettlementAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("QualitySettlementId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("QualitySettlementId");

                    b.ToTable("QualitySettlementAttachments");
                });

            modelBuilder.Entity("App.Quality.QualityProblemRectifications.QualityProblemRectification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExecDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("QualityProblemId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("QualityProblemId");

                    b.ToTable("QualityProblemRectifications");
                });

            modelBuilder.Entity("App.Quality.QualityProblemRectifications.QualityProblemRectificationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("QualityProblemRectificationId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("QualityProblemRectificationId");

                    b.ToTable("QualityProblemRectificationAttachments");
                });

            modelBuilder.Entity("App.Quality.QualityProblems.QualityCompletionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int?>("QualityCompletionId");

                    b.Property<int>("QualityProblemId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("QualityCompletionId");

                    b.ToTable("QualityCompletionAttachments");
                });

            modelBuilder.Entity("App.Quality.QualityProblems.QualityProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CompletionTime");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RectificationState");

                    b.Property<string>("Source");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("QualityProblems");
                });

            modelBuilder.Entity("App.Quality.QualityProblems.QualityProblemAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("QualityProblemId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("QualityProblemId");

                    b.ToTable("QualityProblemAttachments");
                });

            modelBuilder.Entity("App.Quality.QualityStandards.QualityStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("QualityStandards");
                });

            modelBuilder.Entity("App.Quality.QualityStandards.QualityStandardAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("QualityStandardId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("QualityStandardId");

                    b.ToTable("QualityStandardAttachments");
                });

            modelBuilder.Entity("App.RecordMgmt.Records.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int>("DataState");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<string>("RecordName");

                    b.Property<int>("RecordTypeId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RecordTypeId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("App.RecordMgmt.Records.RecordAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("RecordId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("RecordId");

                    b.ToTable("RecordAttachments");
                });

            modelBuilder.Entity("App.Safety.SafetyAccidentDisposals.SafetyAccidentDisposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("ExecDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("SafetyAccidentId");

                    b.Property<string>("Solution");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("SafetyAccidentId");

                    b.ToTable("SafetyAccidentDisposals");
                });

            modelBuilder.Entity("App.Safety.SafetyAccidentDisposals.SafetyAccidentDisposalAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("SafetyAccidentDisposalId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("SafetyAccidentDisposalId");

                    b.ToTable("SafetyAccidentDisposalAttachments");
                });

            modelBuilder.Entity("App.Safety.SafetyAccidents.SafetyAccident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int>("DeathNumber");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DiscoveryTime");

                    b.Property<int>("DisposalState");

                    b.Property<int>("InjuredNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("SettlementTime");

                    b.Property<int>("SeverityId");

                    b.Property<int>("SourceId");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SeverityId");

                    b.HasIndex("SourceId");

                    b.ToTable("SafetyAccidents");
                });

            modelBuilder.Entity("App.Safety.SafetyAccidents.SafetyAccidentAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("SafetyAccidentId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("SafetyAccidentId");

                    b.ToTable("SafetyAccidentAttachments");
                });

            modelBuilder.Entity("App.Safety.SafetyAccidents.SafetySettlementAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("SafetyAccidentId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("SafetyAccidentId");

                    b.ToTable("SafetySettlementAttachments");
                });

            modelBuilder.Entity("App.Safety.SafetyProblemProgresses.SafetyProblemRectification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExecDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("SafetyProblemId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("SafetyProblemId");

                    b.ToTable("SafetyProblemRectifications");
                });

            modelBuilder.Entity("App.Safety.SafetyProblemRectifications.SafetyProblemRectificationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("SafetyProblemRectificationId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("SafetyProblemRectificationId");

                    b.ToTable("SafetyProblemRectificationAttachments");
                });

            modelBuilder.Entity("App.Safety.SafetyProblems.SafetyCompletionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("SafetyProblemId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("SafetyProblemId");

                    b.ToTable("SafetyCompletionAttachments");
                });

            modelBuilder.Entity("App.Safety.SafetyProblems.SafetyProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CompletionTime");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<DateTime>("Deadline");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int?>("Mid");

                    b.Property<int?>("ProcessInstanceId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RectificationState");

                    b.Property<int>("SourceId");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Mid");

                    b.HasIndex("ProcessInstanceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SourceId");

                    b.ToTable("SafetyProblems");
                });

            modelBuilder.Entity("App.Safety.SafetyProblems.SafetyProblemAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("SafetyProblemId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("SafetyProblemId");

                    b.ToTable("SafetyProblemAttachments");
                });

            modelBuilder.Entity("App.Safety.SafetyStandards.SafetyStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("CreatorId");

                    b.Property<int?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<int?>("LastModifierId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SafetyStandards");
                });

            modelBuilder.Entity("App.Safety.SafetyStandards.SafetyStandardAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileMetaId");

                    b.Property<int>("SafetyStandardId");

                    b.HasKey("Id");

                    b.HasIndex("FileMetaId");

                    b.HasIndex("SafetyStandardId");

                    b.ToTable("SafetyStandardAttachments");
                });

            modelBuilder.Entity("App.Workflow.ProcessDefinitions.RoleProcessDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProcessDefinitionId");

                    b.Property<int>("RoleId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDefinitionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleProcessDefinitions");
                });

            modelBuilder.Entity("App.Contract.ConstructionUnits.ConstructionUnit", b =>
                {
                    b.HasOne("App.Contract.ConstructionUnits.ConstructionUnit", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");
                });

            modelBuilder.Entity("App.Contract.ContractDeposits.ContractDeposit", b =>
                {
                    b.HasOne("App.Contract.Contracts.Contractt", "contract")
                        .WithOne("Deposit")
                        .HasForeignKey("App.Contract.ContractDeposits.ContractDeposit", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Contract.Contracts.ContractAttachment", b =>
                {
                    b.HasOne("App.Contract.Contracts.Contractt", "Contract")
                        .WithMany("Attachments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Contract.Contracts.Contractt", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("App.Contract.ConstructionUnits.ConstructionUnit", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId");

                    b.HasOne("App.Contract.Contracts.Contractt", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.Function", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany("Functions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Functions.FunctionApi", b =>
                {
                    b.HasOne("App.Core.Authorization.Apis.Api", "Api")
                        .WithMany()
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Functions.Function", "Function")
                        .WithMany("FunctionApis")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Menus.Menu", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("App.Core.Authorization.Menus.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.Module", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.Modules.ModuleApi", b =>
                {
                    b.HasOne("App.Core.Authorization.Apis.Api", "Api")
                        .WithMany()
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany("ModuleApis")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.OrganizationUnits.OrganizationUnit", b =>
                {
                    b.HasOne("App.Core.Authorization.OrganizationUnits.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");
                });

            modelBuilder.Entity("App.Core.Authorization.PriviledgedPersons.PrivilegedPerson", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleFunction", b =>
                {
                    b.HasOne("App.Core.Authorization.Functions.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany("RoleFunctions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Roles.RoleModule", b =>
                {
                    b.HasOne("App.Core.Authorization.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.MenuShortcut", b =>
                {
                    b.HasOne("App.Core.Authorization.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("Shortcut")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.User", b =>
                {
                    b.HasOne("App.Core.Authorization.Menus.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("App.Core.Authorization.Users.User", "Superior")
                        .WithMany()
                        .HasForeignKey("SuperiorId");
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserQyWeixin", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserUnit", b =>
                {
                    b.HasOne("App.Core.Authorization.OrganizationUnits.OrganizationUnit", "OrganizationUnit")
                        .WithMany("UserUnits")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany("UserUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Authorization.Users.UserWeixin", b =>
                {
                    b.HasOne("App.Core.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.FileManagement.AttachmentFileMetas.AttachmentFileMeta", b =>
                {
                    b.HasOne("App.Core.FileManagement.Attachments.Attachment", "Attachment")
                        .WithMany("Files")
                        .HasForeignKey("AttachId");

                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Form.FieldDefinitions.FieldDefinition", b =>
                {
                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Form.Fields.Field", b =>
                {
                    b.HasOne("App.Core.Form.FieldDefinitions.FieldDefinition", "FieldDefinition")
                        .WithMany()
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance")
                        .WithMany("Fields")
                        .HasForeignKey("Wf_Hi_ProcessInstanceId");
                });

            modelBuilder.Entity("App.Core.Form.FormModels.FormModel", b =>
                {
                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany("FormModels")
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Messaging.Messages.MessageRecord", b =>
                {
                    b.HasOne("App.Core.Messaging.Messages.Message", "Message")
                        .WithMany("MessageRecords")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Parameter.Selections.Option", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("Pid");

                    b.HasOne("App.Core.Parameter.Selections.Selection")
                        .WithMany("Options")
                        .HasForeignKey("SelectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Activities.Wf_Hi_Activity", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", "TaskInstance")
                        .WithMany()
                        .HasForeignKey("TaskInstanceId");
                });

            modelBuilder.Entity("App.Core.Workflow.Comments.Wf_Hi_Comment", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Comments")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", "TaskInstance")
                        .WithMany("Comments")
                        .HasForeignKey("TaskInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Executions.Wf_Ru_Execution", b =>
                {
                    b.HasOne("App.Core.Workflow.Executions.Wf_Ru_Execution", "Parent")
                        .WithMany()
                        .HasForeignKey("Pid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Executions")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.IdentityLinks.Wf_Hi_IdentityLink", b =>
                {
                    b.HasOne("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", "TaskInstance")
                        .WithMany("IdentityLinks")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", b =>
                {
                    b.HasOne("App.Core.Form.FormDefinitions.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionId");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "Parent")
                        .WithMany()
                        .HasForeignKey("Pid");

                    b.HasOne("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", "ProcessDefinition")
                        .WithMany()
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Hi_TaskInstance", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("TaskInstances")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Tasks.Wf_Ru_Task", b =>
                {
                    b.HasOne("App.Core.Workflow.Executions.Wf_Ru_Execution", "ProcessExecution")
                        .WithMany("Tasks")
                        .HasForeignKey("ProcessExecutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Core.Workflow.Variables.Wf_Ru_Variable", b =>
                {
                    b.HasOne("App.Core.Workflow.Executions.Wf_Ru_Execution", "ProcessExecution")
                        .WithMany("Variables")
                        .HasForeignKey("ProcessExecutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany("Variables")
                        .HasForeignKey("ProcessInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Funds.ContractPayments.ContractPayment", b =>
                {
                    b.HasOne("App.Contract.Contracts.Contractt", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Funds.ContractPayments.ContractPayment", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblemRectifications.HousekeepingProblemRectification", b =>
                {
                    b.HasOne("App.Housekeeping.Housekeepings.HousekeepingProblem", "HousekeepingProblem")
                        .WithMany("Rectifications")
                        .HasForeignKey("HousekeepingProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblemRectifications.HousekeepingProblemRectificationAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Housekeeping.HousekeepingProblemRectifications.HousekeepingProblemRectification", "HousekeepingProblemRectification")
                        .WithMany("RectificationPhotoSets")
                        .HasForeignKey("HousekeepingProblemRectificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblems.HousekeepingCompletionAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Housekeeping.Housekeepings.HousekeepingProblem", "HousekeepingProblem")
                        .WithMany("CompletionPhotoSets")
                        .HasForeignKey("HousekeepingProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Housekeeping.HousekeepingProblems.HousekeepingProblemAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Housekeeping.Housekeepings.HousekeepingProblem", "HousekeepingProblem")
                        .WithMany("ProblemPhotoSets")
                        .HasForeignKey("HousekeepingProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Housekeeping.Housekeepings.HousekeepingProblem", b =>
                {
                    b.HasOne("App.Housekeeping.Housekeepings.HousekeepingProblem", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", "MemorabiliaRecord")
                        .WithMany("Attachments")
                        .HasForeignKey("MemorabiliaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Memorabilia.MemorabiliaRecords.MemorabiliaRecord", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Problems.ProblemCoordinations.ProblemCoordination", b =>
                {
                    b.HasOne("App.Problems.Problems.Problem", "Problem")
                        .WithMany("Coordinations")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Problems.ProblemCoordinations.ProblemCoordinationAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Problems.ProblemCoordinations.ProblemCoordination", "ProblemCoordination")
                        .WithMany("CoordinationPhotoSets")
                        .HasForeignKey("ProblemCoordinationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Problems.Problems.Problem", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Problems.Problems.Problem", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Problems.Problems.ProblemAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Problems.Problems.Problem", "Problem")
                        .WithMany("ProblemPhotoSets")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectBriefings.ProjectBriefings.ProjectBriefing", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectEarlyStage.EarlyStages.EarlyStage", b =>
                {
                    b.HasOne("App.ProjectEarlyStage.EarlyStages.EarlyStage", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Parameter.Selections.Option", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectEarlyStage.EarlyStages.EarlyStageAttachment", b =>
                {
                    b.HasOne("App.ProjectEarlyStage.EarlyStages.EarlyStage", "EarlyStage")
                        .WithMany("Attachments")
                        .HasForeignKey("EarlyStageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectGantts.Gantts.ProjectGantt", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectGantts.Links.ProjectLink", b =>
                {
                    b.HasOne("App.ProjectGantts.Gantts.ProjectGantt", "Gantt")
                        .WithMany("Links")
                        .HasForeignKey("GanttId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectGantts.TaskAttachments.ProjectTaskAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.ProjectGantts.Tasks.ProjectTask", "ProjectTask")
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectGantts.Tasks.ProjectTask", b =>
                {
                    b.HasOne("App.ProjectGantts.Gantts.ProjectGantt", "Gantt")
                        .WithMany("Tasks")
                        .HasForeignKey("GanttId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.ProjectGantts.Tasks.ProjectTask", "MainObject")
                        .WithMany("SubObjects")
                        .HasForeignKey("Mid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");
                });

            modelBuilder.Entity("App.ProjectPlan.AnnualPlans.AnnualPlan", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectPlan.MonthlyPlans.MonthlyPlan", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectProgress.PmMonthlyProgresses.MonthlyProgress", b =>
                {
                    b.HasOne("App.ProjectProgress.PmMonthlyProgresses.MonthlyProgress", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectProgress.WeeklyProgresses.WeeklyProgress", b =>
                {
                    b.HasOne("App.ProjectProgress.WeeklyProgresses.WeeklyProgress", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.ProjectProgress.WeeklyProgresses.WeeklyProgressAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.ProjectProgress.WeeklyProgresses.WeeklyProgress", "WeeklyProgress")
                        .WithMany("Attachments")
                        .HasForeignKey("WeeklyProgressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Projects.ProjectAttachments.ProjectAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Projects.ProjectBaseInfos.Project", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "ProjectNature")
                        .WithMany()
                        .HasForeignKey("ProjectNatureId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("App.Core.Parameter.Selections.Option", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("App.Projects.ProjectLocations.ProjectLocation", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithOne("Location")
                        .HasForeignKey("App.Projects.ProjectLocations.ProjectLocation", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Projects.ProjectMembers.ProjectMember", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Projects.ProjectUnits.ProjectUnit", b =>
                {
                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany("Units")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Projects.ProjectUnits.ProjectUnitMember", b =>
                {
                    b.HasOne("App.Projects.ProjectUnits.ProjectUnit", "ProjectUnit")
                        .WithMany("Members")
                        .HasForeignKey("ProjectUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityAccidentDisposals.QualityAccidentDisposal", b =>
                {
                    b.HasOne("App.Quality.QualityAccidents.QualityAccident", "QualityAccident")
                        .WithMany("Disposals")
                        .HasForeignKey("QualityAccidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityAccidentDisposals.QualityAccidentDisposalAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityAccidentDisposals.QualityAccidentDisposal", "QualityAccidentDisposal")
                        .WithMany("DisposalPhotoSets")
                        .HasForeignKey("QualityAccidentDisposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityAccidents.QualityAccident", b =>
                {
                    b.HasOne("App.Quality.QualityAccidents.QualityAccident", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityAccidents.QualityAccidentAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityAccidents.QualityAccident", "QualityAccident")
                        .WithMany("AccidentPhotoSets")
                        .HasForeignKey("QualityAccidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityAccidents.QualitySettlementAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityAccidents.QualityAccident", "QualityAccident")
                        .WithMany("SettlementPhotoSets")
                        .HasForeignKey("QualitySettlementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityProblemRectifications.QualityProblemRectification", b =>
                {
                    b.HasOne("App.Quality.QualityProblems.QualityProblem", "QualityProblem")
                        .WithMany("Rectifications")
                        .HasForeignKey("QualityProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityProblemRectifications.QualityProblemRectificationAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityProblemRectifications.QualityProblemRectification", "QualityProblemRectification")
                        .WithMany("RectificationPhotoSets")
                        .HasForeignKey("QualityProblemRectificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityProblems.QualityCompletionAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityProblems.QualityProblem", "QualityProblem")
                        .WithMany("CompletionPhotoSets")
                        .HasForeignKey("QualityCompletionId");
                });

            modelBuilder.Entity("App.Quality.QualityProblems.QualityProblem", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityProblems.QualityProblem", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityProblems.QualityProblemAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityProblems.QualityProblem", "QualityProblem")
                        .WithMany("ProblemPhotoSets")
                        .HasForeignKey("QualityProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityStandards.QualityStandard", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Quality.QualityStandards.QualityStandardAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Quality.QualityStandards.QualityStandard", "QualityStandard")
                        .WithMany("Attachments")
                        .HasForeignKey("QualityStandardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.RecordMgmt.Records.Record", b =>
                {
                    b.HasOne("App.RecordMgmt.Records.Record", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Parameter.Selections.Option", "RecordType")
                        .WithMany()
                        .HasForeignKey("RecordTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.RecordMgmt.Records.RecordAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.RecordMgmt.Records.Record", "Record")
                        .WithMany("Attachments")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyAccidentDisposals.SafetyAccidentDisposal", b =>
                {
                    b.HasOne("App.Safety.SafetyAccidents.SafetyAccident", "SafetyAccident")
                        .WithMany("Disposals")
                        .HasForeignKey("SafetyAccidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyAccidentDisposals.SafetyAccidentDisposalAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyAccidentDisposals.SafetyAccidentDisposal", "SafetyAccidentDisposal")
                        .WithMany("DisposalPhotoSets")
                        .HasForeignKey("SafetyAccidentDisposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyAccidents.SafetyAccident", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyAccidents.SafetyAccident", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Parameter.Selections.Option", "Severity")
                        .WithMany()
                        .HasForeignKey("SeverityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Parameter.Selections.Option", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyAccidents.SafetyAccidentAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyAccidents.SafetyAccident", "SafetyAccident")
                        .WithMany("AccidentPhotoSets")
                        .HasForeignKey("SafetyAccidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyAccidents.SafetySettlementAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyAccidents.SafetyAccident", "SafetyAccident")
                        .WithMany("SettlementPhotoSets")
                        .HasForeignKey("SafetyAccidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyProblemProgresses.SafetyProblemRectification", b =>
                {
                    b.HasOne("App.Safety.SafetyProblems.SafetyProblem", "SafetyProblem")
                        .WithMany("Rectifications")
                        .HasForeignKey("SafetyProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyProblemRectifications.SafetyProblemRectificationAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyProblemProgresses.SafetyProblemRectification", "SafetyProblemRectification")
                        .WithMany("RectificationPhotoSets")
                        .HasForeignKey("SafetyProblemRectificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyProblems.SafetyCompletionAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyProblems.SafetyProblem", "SafetyProblem")
                        .WithMany("CompletionPhotoSets")
                        .HasForeignKey("SafetyProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyProblems.SafetyProblem", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyProblems.SafetyProblem", "MainObject")
                        .WithMany()
                        .HasForeignKey("Mid");

                    b.HasOne("App.Core.Workflow.ProcessInstances.Wf_Hi_ProcessInstance", "ProcessInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceId");

                    b.HasOne("App.Projects.ProjectBaseInfos.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Parameter.Selections.Option", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyProblems.SafetyProblemAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyProblems.SafetyProblem", "SafetyProblem")
                        .WithMany("ProblemPhotoSets")
                        .HasForeignKey("SafetyProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyStandards.SafetyStandard", b =>
                {
                    b.HasOne("App.Core.Parameter.Selections.Option", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Safety.SafetyStandards.SafetyStandardAttachment", b =>
                {
                    b.HasOne("App.Core.FileManagement.Files.FileMeta", "FileMeta")
                        .WithMany()
                        .HasForeignKey("FileMetaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Safety.SafetyStandards.SafetyStandard", "SafetyStandard")
                        .WithMany("Attachments")
                        .HasForeignKey("SafetyStandardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Workflow.ProcessDefinitions.RoleProcessDefinition", b =>
                {
                    b.HasOne("App.Core.Workflow.ProcessDefinitions.Wf_Re_ProcessDefinition", "ProcessDefinition")
                        .WithMany()
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Core.Authorization.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
